//
//  설명.swift
//  DelegateEX
//
//  Created by 김성호 on 2022/12/28.
//

/*
 
 
 delegate가 무엇인지.
 delegate의 예시.
 delegate의 사용법.


 UITableView(DataSource, Delegate)
 왜 꼭 채택해야 하며, 왜 프로토콜로 구현되어 있을까?

 delegate는 대리자라는 의미이다. 근데 왜 굳이 위임을 해야하는가?


 셀을 탭하면, 테이블뷰는 탭 이벤트를 받는다.
 탭 이벤트를 받으면 delegate의 didSelectedRowAt method를 실행.
 -> 이를 다르게 해석하면, 이벤트를 받았을 때 어떤 행동을 할 것이다. 라는 것을 delegate에 위임한 것이다.


 보통 = self로 코드를 작성해서 VC 인스턴스 자신을 위임자로 설정하고, didSelectRowAt method에 셀을 탭했을 때 어떤 행동을 할지 정의.


 근데 왜 굳이 이렇게? - > 우리가 UITableView의 내부 코드를 수정할 수 없기 때문이다.

 수정할 수 없기 때문에, 테이블뷰와 객체를 연결해주는 방식을 이용해야하는데, 그게 delegate pattern.

 델리게이트 패턴은
 이벤트를 받은 객체와 그 이벤트를 처리할 객체가 다른 경우 두 객체를 소통하기 위해 사용하는 경우가 많음.



 Ex - ExFirst )

 예시코드를 살펴보자.

 갑자기 물이 먹고 싶어졌는데, 밖이 너무 추워서 지훈이에게 물을 사오라고 시키려고 한다.

 많은 예제코드들이 프로토콜을 꼭 구현하지만, 이렇게 프로토콜 없이도 델리게이트 패턴을 구현할 수 있습니다.

 (1) 위임하는 객체,
 (2) 위임받는 객체,
 (3) 위임할 행동

 이렇게 3가지만 정의해두면 됨.


 저(Me)는 물을 먹고 싶다는 이벤트를 받았지만, 제가 사러가기 싫기 때문에 다른 객체

 즉, 지훈이(Hon)에게 물을 사오라는 행동(getWater)을 위임했습니다.

 제가(Me)가 이벤트를 받아 giveMeWater을 실행시켜 이벤트를 처리하면,

 실질적으로 델리게이트인 지훈(Hon)이가 대신 일을 처리해주죠.
 
 왜 꼭 weak keyword를 사용해야할까요?
 -> protocol을 이용하여 객체와 객체가 1:1 단방향 통신을 할 수 있는 방법이며, class 내에 객체를 delegate로 설정해둔다면, retain counter가 증가하여 순환참조가 발생할 수 있습니다.


 따라서 이를 방지하기 위해 Delegate를 weak var로 선언(assign)하여 처리합니다.


 그럼 이렇게 사용하면 되는데, 대체 왜 많은 예제에서는 프로토콜을 사용하는 것일까요?


 프로토콜을 사용하면, 코드의 유연성과 재사용성을 높일 수 있습니다.




 Ex - ExSecond )

 저는 이제 지훈이 뿐만 아니라, 준연이한테도 혹은  MeProtocol을 채택한 누구에게든 물을 사오라는 이벤트를 위임할 수 있게 된 거죠.




 실사용 예시를 보면서 생각해봅시다.
 
 
 
 
 */
